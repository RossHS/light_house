import 'dart:async';

import 'package:async/async.dart';
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart' hide FlutterReactiveBle;
import 'package:get_it/get_it.dart';
import 'package:light_house/src/services/ble_react_wrapper_interface.dart';
import 'package:light_house/src/utils/logger.dart';
import 'package:light_house/src/utils/mobx_async_value.dart';
import 'package:light_house/src/utils/sp_keys.dart';
import 'package:mobx/mobx.dart';
import 'package:shared_preferences/shared_preferences.dart';

part 'ble_device_presets_init_controller.g.dart';

// ignore: library_private_types_in_public_api
class BLEDevicePresetsInitController = _BLEDevicePresetsInitControllerBase with _$BLEDevicePresetsInitController;

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ BLE
abstract class _BLEDevicePresetsInitControllerBase with Store {
  _BLEDevicePresetsInitControllerBase() {
    _searchSPForData();
  }

  final _sp = GetIt.I<SharedPreferences>();

  /// –¢–∞–π–º–µ—Ä –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞, —Ç.–∫. –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ç–∞–π–º–µ—Ä –±—É–¥–µ—Ç –≤–∏—Å–µ—Ç—å –≤–µ—á–Ω–æ
  RestartableTimer? _timer;

  /// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–∞ —Ç–æ, —á—Ç–æ –¥–µ–≤–∞–π—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∏—Å–∫–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π.
  /// —Ç.–µ. –æ–Ω –∂–¥–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–æ—Ç –∏ –≤—Å–µ.
  /// –ø.—Å. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –º–æ–∂–Ω–æ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å [bleDeviceDataForConnection]
  var bleDataInitedCompleter = Completer<bool>();

  /// –°–ª—É—à–∞—Ç–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  StreamSubscription<DiscoveredDevice>? _listener;

  /// –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏
  @observable
  AsyncValue<({String deviceId, Uuid serviceId})> bleDeviceDataForConnection = const AsyncValue.value();

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏—â–µ—Ç bluetooth —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º `HMSoft`,
  /// –ø–æ—Å–ª–µ –µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–∞–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫
  Future<void> initBleSettings() async {
    if (bleDeviceDataForConnection.value != null) {
      logger.i('BLE was recorded - $bleDeviceDataForConnection');
      return;
    }
    if (bleDataInitedCompleter.isCompleted || _listener != null) throw Exception('Incorrect controller states');

    if (_searchSPForData()) return;
    bleDeviceDataForConnection = const AsyncValue.loading();
    _setTimer();
    _listener = GetIt.I<BleReactWrapperInterface>().scanForDevices(withServices: []).listen((event) {
      if (event.name == 'HMSoft') {
        logger.d('correct device found - $event');
        _timer?.cancel();
        _listener?.cancel();
        _listener = null;
        final deviceId = event.id;
        final serviceId = event.serviceUuids.first;
        bleDeviceDataForConnection = AsyncValue.value(
          value: (
            deviceId: deviceId,
            serviceId: serviceId,
          ),
        );
        _sp.setString(bleDeviceIdKey, deviceId);
        _sp.setString(bleServiceIdKey, serviceId.toString());
        bleDataInitedCompleter.complete(true);
      }
    });
  }

  void _setTimer() {
    // –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    _timer?.cancel();
    _timer = RestartableTimer(const Duration(seconds: 5), () {
      logger.w('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ BLE –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ! üí©');
      bleDeviceDataForConnection = const AsyncValue.error(
        error: AsyncError(errorMessage: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
      );
      bleDataInitedCompleter.complete(false);
      bleDataInitedCompleter = Completer();
      _listener?.cancel();
      _listener = null;
    });
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ SP, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ –∑–∞–Ω–æ—Å–∏–º –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  @action
  bool _searchSPForData() {
    if (_sp.containsKey(bleDeviceIdKey) && _sp.containsKey(bleServiceIdKey)) {
      bleDeviceDataForConnection = AsyncValue.value(
        value: (
          deviceId: _sp.getString(bleDeviceIdKey)!,
          serviceId: Uuid.parse(_sp.getString(bleServiceIdKey)!),
        ),
      );
      bleDataInitedCompleter.complete(true);
      return true;
    }
    return false;
  }
}
