import 'dart:async';
import 'dart:math';

import 'package:async/async.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart';
import 'package:get_it/get_it.dart';
import 'package:light_house/main.dart' as main;
import 'package:light_house/src/controllers/additions/logs_store_controller.dart';
import 'package:light_house/src/controllers/ble_core/ble_controllers.dart';
import 'package:light_house/src/models/log_message_model.dart';
import 'package:light_house/src/widgets/errors_widgets/errors_widgets.dart';
import 'package:mobx/mobx.dart';

const _padding = EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0);

/// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// –æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –¢—É—Ç –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
/// 1. –ù–∞–ª–∏—á–∏–µ bluetooth –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã
/// 2. –ù–∞–π–¥–µ–Ω –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π BLE –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/// –ê —Ç–∞–∫-–∂–µ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∏–ª–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/// TODO 24.03.2024 - –ø.—Å. –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã—à–µ–ª –Ω–µ —Å–∞–º—ã–π —É–¥–∞—á–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–¥, –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –ø–æ–º–µ–Ω—è–µ–º (–Ω–µ—Ç ü§°)
class AnimatedAppErrorsList extends StatefulWidget {
  const AnimatedAppErrorsList({super.key});

  @override
  State<AnimatedAppErrorsList> createState() => _AnimatedAppErrorsListState();
}

class _AnimatedAppErrorsListState extends State<AnimatedAppErrorsList> {
  late StreamSubscription<BleStatus> _bleStatusListener;
  late ReactionDisposer _bleReact;
  late ReactionDisposer _logsReact;

  Widget _bleStatusWidget = const SizedBox.shrink(key: ValueKey('NON BLE STATUS INFO'));
  Widget _bleDeviceInfoWidget = const SizedBox.shrink(key: ValueKey('NON BLE DEVICE INFO'));
  final List<Widget> _additionsErrors = [];

  @override
  void initState() {
    super.initState();

    // –î–∞, –Ω–µ —Å–∞–º—ã–π –∫—Ä–∞—Å–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥, –Ω–æ –≤—Å–µ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å [ErrorsAnimatedList]
    // –¢.–µ. —É –Ω–∞—Å –≤ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ –∫–æ–Ω–µ—á–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏,
    // —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∞–º–æ –¥–µ—Ä–µ–≤–æ [StreamBuilder], —Ç–æ —É –Ω–∞—Å –ø–æ–ª–æ–º–∞–µ—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    _bleStatusListener = FlutterReactiveBle().statusStream.listen((event) {
      if (!mounted) return;
      setState(() {
        _bleStatusWidget = switch (event) {
          BleStatus.unsupported =>
            const _ButtonShortHand(key: ValueKey('BLE STATUS INFO'), child: Text('BLE –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')),
          BleStatus.poweredOff =>
            const _ButtonShortHand(key: ValueKey('BLE STATUS INFO'), child: Text('–í–∫–ª—é—á–∏—Ç–µ Bluetooth')),
          BleStatus.unauthorized => const _ButtonShortHand(
              key: ValueKey('BLE STATUS INFO'),
              onPressed: main.permissionRequest,
              child: Text('–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è?'),
            ),
          _ => const SizedBox.shrink(key: ValueKey('NON BLE STATUS INFO')),
        };
      });
    });
    _bleReact = reaction(
      (_) => GetIt.I<BLEDevicePresetsInitController>().bleDeviceDataForConnection,
      fireImmediately: true,
      (dataForConnection) {
        if (!mounted) return;

        if (dataForConnection.value != null) {
          setState(() {
            _bleDeviceInfoWidget = const SizedBox.shrink(
              key: ValueKey('NON BLE DEVICE INFO'),
            );
          });
          return;
        }
        final controller = GetIt.I<BLEDevicePresetsInitController>();
        setState(() {
          _bleDeviceInfoWidget = dataForConnection.map(
            value: (value) => _ButtonShortHand(
              key: const ValueKey('BLE DEVICE INFO NON DATA'),
              onPressed: controller.initBleSettings,
              child: const Text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'),
            ),
            error: (error) => _ButtonShortHand(
              key: const ValueKey('BLE DEVICE INFO ERROR'),
              onPressed: controller.initBleSettings,
              child: Text(error.error!.errorMessage),
            ),
            loading: (loading) => const _ButtonShortHand(
              key: ValueKey('BLE DEVICE INFO LOADING'),
              onPressed: null,
              child: Text('–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö!'),
            ),
          );
        });
      },
    );
    _logsReact = reaction(
      (_) => GetIt.I<LogsStoreController>().logsList,
      (logsList) {
        if (!mounted) return;
        final log = logsList.last;
        if (log.level != MessageLevel.error && log.level != MessageLevel.warning) return;

        final key = ObjectKey(log.msg + Random().nextInt(100000).toString());
        setState(() {
          _additionsErrors.add(
            Padding(
              key: key,
              padding: _padding,
              child: ErrorsNotification.text(
                child: _ErrorsSizeConstrains.text(
                  child: Text(
                    logsList.last.msg,
                    textAlign: TextAlign.left,
                  ),
                ),
              ),
            ),
          );
        });
        RestartableTimer(
          const Duration(seconds: 10),
          () {
            if (!mounted) return;
            setState(() {
              _additionsErrors.removeWhere((element) => element.key == key);
            });
          },
        );
      },
    );
  }

  @override
  void dispose() {
    _bleStatusListener.cancel();
    _bleReact();
    _logsReact();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final mq = MediaQuery.of(context);
    return ConstrainedBox(
      constraints: BoxConstraints.tightFor(width: mq.size.width / 2),
      child: RepaintBoundary(
        child: ErrorsAnimatedList(
          padding: const EdgeInsets.symmetric(vertical: 4.0),
          children: [
            _bleStatusWidget,
            _bleDeviceInfoWidget,
            ..._additionsErrors,
          ],
        ),
      ),
    );
  }
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç, –¥–∞–±—ã –ø–æ–¥–æ–≥–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä–æ–≤.
/// –û–ø—è—Ç—å –∂–µ, –≤—ã–Ω–µ—Å –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç, –¥–∞–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
class _ErrorsSizeConstrains extends StatelessWidget {
  const _ErrorsSizeConstrains.text({
    required this.child,
  }) : constraints = const BoxConstraints(minWidth: double.infinity);

  const _ErrorsSizeConstrains.button({
    required this.child,
  }) : constraints = const BoxConstraints(minWidth: double.infinity, minHeight: 40);

  final BoxConstraints constraints;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return ConstrainedBox(
      constraints: constraints,
      child: Center(child: child),
    );
  }
}

/// –ß–∏—Å—Ç–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞, –¥–∞–±—ã –±—ã–ª–æ –ø–æ–º–µ–Ω—å—à–µ –¥—É–±–ª–µ–π
class _ButtonShortHand extends StatelessWidget {
  const _ButtonShortHand({
    super.key,
    this.onPressed,
    required this.child,
  });

  final VoidCallback? onPressed;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: _padding,
      child: ErrorsNotification.button(
        onPressed: onPressed,
        child: _ErrorsSizeConstrains.button(
          child: child,
        ),
      ),
    );
  }
}
