import 'dart:ui' as ui;

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_mobx/flutter_mobx.dart';
import 'package:flutter_shaders/flutter_shaders.dart';
import 'package:get_it/get_it.dart';
import 'package:light_house/src/controllers/ble_core/ble_controllers.dart';

/// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ "–≤–∏–¥–µ–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è" —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class DemoStand extends StatelessWidget {
  const DemoStand({
    super.key,
    required this.mqd,
  });

  final MediaQueryData mqd;

  @override
  Widget build(BuildContext context) {
    return FittedBox(
      fit: BoxFit.contain,
      // —Ç.–∫. –∫–∞—Ä—Ç–∏–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞,
      // –∞ –º—ã –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–ø—Ä–∏ –µ–µ –∑–∞–≥—Ä—É–∑–∫–µ) –Ω–µ –∑–Ω–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã,
      // —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      child: ConstrainedBox(
        constraints: BoxConstraints(
          minWidth: mqd.size.width,
          maxHeight: mqd.size.height,
        ),
        child: const AspectRatio(
          aspectRatio: 2329 / 3093, // –•–∞—Ä–¥–∫–æ–¥ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –ø–æ–¥ —Ñ–æ—Ç–∫—É ü§°
          child: ClipRRect(
            clipBehavior: ui.Clip.antiAlias,
            borderRadius: BorderRadius.all(ui.Radius.circular(38.5)),
            child: _DemoStandContent(),
          ),
        ),
      ),
    );
  }
}

/// –í—Å–µ –æ—Å–Ω–æ–≤–Ω–æ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω, –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
class _DemoStandContent extends StatelessWidget {
  const _DemoStandContent();

  @override
  Widget build(BuildContext context) {
    final rgbController = GetIt.I<RGBController>();
    return Observer(
      builder: (context) {
        rgbController.color;
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞, –¥–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        return TweenAnimationBuilder(
          duration: const Duration(milliseconds: 200),
          tween: ColorTween(
            begin: null,
            end: rgbController.color,
          ),
          builder: (_, color, child) => _GlitchShader(color: color!, child: child!),
          child: Image.asset(
            'assets/images/picture.jpg',
            frameBuilder: (context, child, frame, wasSynchronouslyLoaded) {
              if (wasSynchronouslyLoaded) return child;
              return AnimatedOpacity(
                opacity: frame == null ? 0 : 1,
                duration: const Duration(seconds: 2),
                child: child,
              );
            },
          ),
        );
      },
    );
  }
}

/// Glitch –≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–µ–π–¥–µ—Ä, —Ç—É—Ç —Ç–≤–æ—Ä–∏—Ç—Å—è –≤—Å—è –º–∞–≥–∏—è)
/// –≥–¥–µ [color] - —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞
class _GlitchShader extends StatefulWidget {
  const _GlitchShader({
    required this.color,
    required this.child,
  });

  final Color color;
  final Widget child;

  @override
  State<_GlitchShader> createState() => _GlitchShaderState();
}

class _GlitchShaderState extends State<_GlitchShader> with SingleTickerProviderStateMixin {
  var _time = 0.0;

  late final Ticker _ticker;

  @override
  void initState() {
    super.initState();
    _ticker = createTicker((elapsed) {
      _time = elapsed.inMilliseconds / 1000;
      setState(() {});
    });
    _ticker.start();
  }

  @override
  void dispose() {
    _ticker.dispose();
    super.dispose();
  }

  double _coordinateTranslation(int value) => value / 255.0;

  @override
  Widget build(BuildContext context) {
    return ShaderBuilder(
      assetKey: 'assets/shaders/cam_glitch.glsl',
      (context, shader, child) {
        return AnimatedSampler(
          child: child!,
          (ui.Image image, Size size, Canvas canvas) {
            final devicePixelRatio = MediaQuery.of(context).devicePixelRatio;
            final rbgColor = widget.color;
            shader
              ..setFloat(0, image.width.toDouble() / devicePixelRatio)
              ..setFloat(1, image.height.toDouble() / devicePixelRatio)
              ..setFloat(2, _time)
              ..setFloat(3, _coordinateTranslation(rbgColor.red))
              ..setFloat(4, _coordinateTranslation(rbgColor.green))
              ..setFloat(5, _coordinateTranslation(rbgColor.blue))
              ..setImageSampler(0, image);

            canvas.drawRect(
              Offset.zero & size,
              Paint()..shader = shader,
            );
          },
        );
      },
      child: widget.child,
    );
  }
}
